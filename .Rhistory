aa
austen <- ex2222[ex2222$Book != "SanditionII",]
austen
austen <- ex2222[ex2222$Book != "SanditonII",]
austen
summary(mod.aust <- glm(Count ~  Book + Word, data=austen, family=poisson()))
summary(mod.aust.word <- glm(Count ~ Word, data=austen, family=poisson()))
anova(mod.aust, mod.aust.word)
anova(mod.aust.word, mod.aust)
summary(mod.aust.word <- glm(Count ~ Word, data=austen, family=quasipoisson()))
ex2222$Austen <- TRUE
ex2222$Austen[ex2222$Book == "SanditonII"] <- FALSE
summary(glm(Count ~ Austen + Word, data=ex22, family=quasipoisson())
)
summary(glm(Count ~ Austen + Word, data=ex2222, family=quasipoisson()))
summary(glm(Count ~ Austen * Word, data=ex2222, family=quasipoisson()))
summary(glm(Count ~ Austen + Word, data=ex2222, family=quasipoisson()))
exp(SanditonII)
exp(-1.7372)
summary(glm(Count ~ Austen + Word, data=ex2222, family=poisson()))
summary(glm(Count ~ Austen + Word, data=ex2222, family=quasipoisson()))
summary(glm(Count ~ Austen + Word, data=ex2222, family=poisson()))
ex2222
mean(ex2222$Count)
var(ex2222$Count)
hist(ex2222$Count)
hist(ex2222$Count, breaks=10)
hist(ex2222$Count[ ex2222$Word == "a" ], breaks=10)
hist(ex2222$Count, breaks=10)
hist(ex2222$Count, breaks=5)
hist(ex2222$Count, breaks=7)
hist(ex2222$Count, breaks=6)
ex2224
with( ex2224, hist(Failures))
with( ex2224, hist(Failures, breaks=10))
plot(Failures ~ Time, data=ex2224)
glm(Failures ~ offset(Time) + factor(System), data=ex2224, family=poisson())
glm(Failures ~ offset(Time) + System, data=ex2224, family=poisson())
glm(Failures ~ offset(log(Time)) + System, data=ex2224, family=poisson())
glm(Failures ~ offset(log(Time)) + factor(System), data=ex2224, family=poisson())
mm <- glm(Failures ~ offset(log(Time)) + factor(System), data=ex2224, family=poisson())
library(MASS)
library(car)
??lrtest
mm2 <- glm(Failures ~ offset(log(Time)) , data=ex2224, family=poisson())
anova(mm, mm2)
?anova(mm, mm2)
anova(mm, mm2, test="chisq")
anova(mm, mm2, test="Chisq")
?anova.glm
head(ex2224)
ex2224
matplot(ex2224)
matplot(t(ex2224[, c("Valve", "Size", "Mode")]), t(ex2224[, "Failures"]))
matplot(ex2224[, c("Valve", "Size", "Mode")], ex2224[, "Failures"])
head(ex2224[, c("Valve", "Size", "Mode")])
table(ex2224[, c("Valve")])
table(ex2224[, c("Size", "Mode")])
x <- rnorm(1000)
x <- runif(1000)
?fisher2z
??fisher2z
library(psych)
z <- fisherz(x)
rank(x)
rank(x) == rank(z)
all(rank(x) == rank(z))
?svd
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
X <- hilbert(9)[, 1:6]
(s <- svd(X))
?prcomp
require(graphics)
The variances of the variables in the
USArrests data vary by orders of magnitude, so scaling is appropriate
(pc.cr <- princomp(USArrests, cor = TRUE))  # inappropriate
screeplot(pc.cr)
screeplot(pc.cr, type="lines")
screeplot(pc.cr, type="lines", npcs=10)
pc.cr
pc.cr/cumsusm(pc.cr)
pc.cr/cumsum(pc.cr)
pc.cr$sdev
pc.cr$sdev^2/cumsum(pc.cr$sdev^2)
1- (pc.cr$sdev^2/cumsum(pc.cr$sdev^2))
plot(pc.cr$sdev^2/cumsum(pc.cr$sdev^2))
library(shiny)
runUrl("http://biostat.jhsph.edu/~hjaffee/Shiny/myapp.tar")
?rpart.control
library(rpart)
?rpart.control
library(randomForest)
?randomForest
?predict.randomForest
?rpart
?svm
library(e1071)
?svm
?poly
plot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1, xlim = c(0, 25))
d <- seq(0, 25, length.out = 200)
for(degree in 1:4) {
fm <- lm(dist ~ poly(speed, degree), data = cars)
assign(paste("cars", degree, sep = "."), fm)
lines(d, predict(fm, data.frame(speed = d)), col = degree)
}
anova(cars.1, cars.2, cars.3, cars.4)
degree = 2
fm <- lm(dist ~ poly(speed, degree), data = cars)
fm
fm.naive <- lm(dist ~ speed + I(speed^2), data = cars)
fm.naive
summary(fm)
summary(fm.n)
summary(fm.naive)
summary(fm)
cars$speed2 <- (cars$speed - mean(cars$speed))^2
fm.naive <- lm(dist ~ speed2, data = cars)
fm.naive <- lm(dist ~ speed + I(speed^2), data = cars)
fm.naive2 <- lm(dist ~ speed2, data = cars)
summary(fm)
summary(fm.naive)
summary(fm.naive2)
fm.naive2 <- lm(dist ~ speed + speed2, data = cars)
summary(fm.naive2)
?glmnet
library(glmnet)
?glmnet
rm(list=ls())
Gaussian
x=matrix(rnorm(100*20),100,20)
y=rnorm(100)
fit1=glmnet(x,y)
print(fit1)
coef(fit1,s=0.01) # extract coefficients at a single value of lambda
predict(fit1,newx=x[1:10,],s=c(0.01,0.005)) # make predictions
?predict.glm
?predict.glmnet
install.packages("caret")
library(caret)
?randomForewt
?randomForest
vignette("foreach")
?randomForest
library(tm)
?stopwords
?removeSparseTerms
stopwords
stopwords()
library(shiny)
runUrl("http://biostat.jhsph.edu/~hjaffee/Shiny/gui7.tar")
library(tm)
citation(tm)
cite(tm)
library(knitr)
library(knitcitations)
citation(tm)
citation("tm")
?citation
x <- citation("tm")
toBibtex(x)
help(package="knitcitations")
citep("10.3998/3336451.0009.101")
bibliography()
rm(list=ls())
library(knitcitations)
library(tm)
knitcitations <- citation("tm")
rf <- citation("rpart")
rp <- citation("randomForest")
svm <- citation("e1071")
gbm <- citation("gbm")
glmnet <- citation("glmnet")
gbm
glm
glmnet
?write.csv
library(rpart)
?rpart
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
plot(fit)
text(fit, use.n = TRUE)
kyphosis
mod <- glm(Kyphosis ~ Age + Number + Start, data = kyphosis, family=binomial())
mod
summary(mod)
predict(mod)
predict(mod, type="repsonse")
predict(mod, type="response")
p <- predict(mod, type="response")
predict(fit)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
fit
plot(fit)
text(fit, n=TRUE)
plot(fit)
text(fit, use.n=TRUE)
text.rpart
?text.rpart
?predict.lm
?predict.glm
?text.rpart
library(ROCR)
library(rpart)
?rpart
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)#
fit2 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,#
parms = list(prior = c(.65,.35), split = "information"))#
fit3 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,#
control = rpart.control(cp = 0.05))#
par(mfrow = c(1,2), xpd = NA) # otherwise on some devices the text is clipped#
plot(fit)#
text(fit, use.n = TRUE)
?Kyphosis
library(ROCR)
?ROC
?ROCR
?performance
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)#
fit2 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,#
parms = list(prior = c(.65,.35), split = "information"))#
fit3 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,#
control = rpart.control(cp = 0.05))
mod <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis, family="binomial")
mod <- glm(Kyphosis ~ Age + Number + Start, data = kyphosis, family=binomial())
mod
p.mod <- predict(mod, type="response")
p.rpart <- predict(rpart, type="response")
p.rpart <- predict(fit)
p.rpart
p.rpart <- predict(fit)[, 1]
p.rpart <- predict(fit)[, 2]
p.rpart
pp.mod <- prediction(p.mod, kyphosis$Kyphosis)
pp.mod
pp.rpart <- prediction(p.rpart, kyphosis$Kyphosis)
perf.rpart <- performance(pp.rpart,"tpr","fpr")
perf.mod <- performance(pp.mod,"tpr","fpr")
plot(perf.mod)
lines(perf.rpart, col='red')
plot(c(perf.mod, perf.rpart))
lines(perf.rpart)
perf.rpart
plot(perf.rpart)
pred <- prediction(cbind(p.rpart, p.mod, kyphosis$Kyphosis)
)
pred <- prediction(cbind(p.rpart, p.mod), kyphosis$Kyphosis)
cbind(p.rpart, p.mod)
pred <- prediction(cbind(p.rpart, p.mod), cbind(kyphosis$Kyphosis, kyphosis$Kyphosis))
perf <- performance(pred, "tpr", "fpr")
plot(perf)
plot(perf, colorize=TRUE)
plot(perf, colorize=F)
abline(0, 1)
?performance
perf
perf
perf@x.name
perf@x.values
perf@y.values
install.packages("irlba")
library(shiny); runUrl("http://biostat.jhsph.edu/~hjaffee/Shiny/gui7.tar")
runUrl
options(browser)
options("browser")
?options
getOption("browsewr")
getOption("browser")
options(browser = "/Applications/Safari.app/Contents/MacOS/Safari")
library(shiny); runUrl("http://biostat.jhsph.edu/~hjaffee/Shiny/gui7.tar")
library(shiny); runUrl("http://biostat.jhsph.edu/~hjaffee/Shiny/gui7.tar")
library(shiny); runUrl("http://biostat.jhsph.edu/~hjaffee/Shiny/gui7.tar")
slidify
library(slidify)
?slidify
?slidify-package
?"slidify-package"
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
setwd("~/Dropbox/Classes/fMRI_2013/fMRI_Guidelines/")
author("fMRI_guidelines")
setwd("~/Dropbox/Classes/fMRI_2013/")
author("fMRI_guidelines")
slidify("index.Rmd")
publish(user = "muschellij2", repo = "fMRI_Guidelines", host = 'github')
slidify("index.Rmd")
publish(user = "muschellij2", repo = "fMRI_Guidelines", host = 'github')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
publish(user = "muschellij2", repo = "fMRI_Guidelines", host = 'github')
slidify("index.Rmd")
publish(user = "muschellij2", repo = "fMRI_Guidelines", host = 'github')
slidify("index.Rmd")
publish(user = "muschellij2", repo = "fMRI_Guidelines", host = 'github')
slidify("index.Rmd")
publish(user = "muschellij2", repo = "fMRI_Guidelines", host = 'github')
slidify("index.Rmd")
publish(user = "muschellij2", repo = "fMRI_Guidelines", host = 'github')
publish(user = "muschellij2", repo = "fMRI_Guidelines", host = 'github')
publish(user = "muschellij2", repo = "fMRI_Guidelines", host = 'github')
slidify("index.Rmd")
publish(user = "muschellij2", repo = "fMRI_Guidelines", host = 'github')
source('~/.active-rstudio-document', echo=TRUE)
slidify("index.Rmd")
publish(user = "muschellij2", repo = "fMRI_Guidelines", host = 'github')
xx <- read.csv("https://dl.dropboxusercontent.com/u/7710864/jhsph753/finalProject/loansData.csv")
xx <- read.csv("http://dl.dropboxusercontent.com/u/7710864/jhsph753/finalProject/loansData.csv")
xx
load("/Users/muschellij2/Dropbox/Classes/Biostat 750_2012/Biostat_754_2013/Kaggle_Yelp/processed_data/Processed_training.Rda")
ls()
head(proc)
rm(list=ls())
library(RJSONIO)
library(plyr)
library(xtable)
library(tm)
library(randomForest)
library(rpart)
library(e1071)
library(gbm)
library(glmnet)
library(nnet)
library(leaps)
library(caret)
library(foreach)
library(doMC)
username <- Sys.info()[['user']]
print(username)
wd <- switch(username,
'jmuschel' = "/home/bst/student/jmuschel/kaggle_yelp",
"muschellij2" = "~/Dropbox/Classes/Biostat 750_2012/Biostat_754_2013/Kaggle_Yelp"
)
traindir <- file.path(wd, "yelp_training_set")
testdir <- file.path(wd, "yelp_test_set")
procdir <- file.path(wd, "processed_data")
days <- weekdays(as.Date(sprintf("1960-01-%02.0f", 3:9)))
iset <- "test"
ffname <- paste0("Processed_", iset, ".Rda")
fname <- file.path(procdir, ffname)
load(file=fname)
cn <- colnames(proc)
cn <- gsub(x=cn, ".[", "", fixed=TRUE)
cn <- gsub(x=cn, ")", "", fixed=TRUE)
cn <- gsub(x=cn, ",", "_", fixed=TRUE)
colnames(proc) <- cn
proc$day <- factor(proc$day, levels=days)
test <- proc
iset <- "training"
ffname <- paste0("Processed_", iset, ".Rda")
fname <- file.path(procdir, ffname)
load(file=fname)
goodwords <- c("good", "great", "fast", "favorite", "best", "friendly", "excellent",
"to die for", "open", "big", "fantastic", "delicious", "tasty", "nice",
"comfortable", "quick", "fresh", "clean", "love", "yum", "cheap", "perfect",
"pleasant", "reasonably", "reasonable", "four stars", "yummy", "right", "correct",
"better", "again", "fun", "happy", "pretty")
#### Potential list
# "plenty"
###
badwords <- c("worst", "bad", "rude", "rudest", "disappointed", "disappointing",
"slow", "sucks", "suck", "sucked", "shit",
"crap", "hot", "cold", "stale", "old", "hate", "wrong", "overpriced", "expensive",
"embarassing", "freezing", "horrible", "terrible", "disgusting", "gross", "nasty",
"dirty", "avoid", "forever", "hurt", "forgot", "unattentive", "pompous", "embarassed", "nastiest",
"grossest", "dirtiest", "sad", "saddest", "small", "little", "though"
)
### OK -list
okwords <- c(
"ok", "okay", "standard"
)
words <- unique(c(goodwords, badwords, okwords))
sums <- colSums(proc[, words])
zero <- names(which(sums == 0))
droppers <- which(colnames(proc) %in% c("to die for", "four stars", "ok"))
proc <- proc[, -droppers]
droppers <- which(colnames(test) %in% c("to die for", "four stars", "ok"))
test <- test[, -droppers]
set.seed(20130425)
# size of nreview 229907
Ntrain <- nrow(proc)
### size of test 123312
Nvalid <- nrow(test)
valid.sample <- sample(1:Ntrain, size=Nvalid)
proc$day <- factor(proc$day, levels=days)
proc$user_id <- proc$business_id <- proc$review_id <- NULL
test$user_id <- test$business_id <- test$review_id <- NULL
proc$review_count[is.na(proc$review_count)] <- 0
test$review_count[is.na(test$review_count)] <- 0
mn <- mean(proc$average_stars, na.rm=TRUE)
proc$average_stars[is.na(proc$average_stars)] <- mn
test$average_stars[is.na(test$average_stars)] <- mn
proc$review_count <- log(proc$review_count + 1)
proc$funny <- proc$cool <- NULL
cn <- colnames(proc)
cn <- gsub(x=cn, ".[", "", fixed=TRUE)
cn <- gsub(x=cn, ")", "", fixed=TRUE)
cn <- gsub(x=cn, ",", "_", fixed=TRUE)
colnames(proc) <- cn
valid <- proc[ valid.sample, ]
train <- proc[-valid.sample, ]
N <- nrow(train)
nruns <- 10
### Do a cross validation to see which models perform best out of the candidate ones
folds <- rep(1:nruns, ceiling(N/nruns))[1:N]
folds <- sample(folds)
wwords <- words[words %in% colnames(proc)]
train[, wwords] <- (train[, wwords] > 0)*1
iword <- 1
tab <- table(train[, wwords[iword]], train$y)
head(train)
tab <- table(train[, wwords[iword]], train$useful)
tab
fisher.test(tab)
tab <- table(train[, wwords[iword]], train$useful > 20)
tab
y <- train$useful
y[y > 20] <- 20
tab <- table(train[, wwords[iword]], y)
tab
fisher.test(tab)
chisq.test(tab)
chisq.test(tab)$p.value
for (iword in 1:length(wwords)){
tab <- table(train[, wwords[iword]], y)
wordp$p.val[iword] <- chisq.test(tab)$p.value
}
wordp <- data.frame(wwords, stringsAsFactors=FALSE)
wordp$p.val <- NA
y <- train$useful
y[y > 20] <- 20
for (iword in 1:length(wwords)){
tab <- table(train[, wwords[iword]], y)
wordp$p.val[iword] <- chisq.test(tab)$p.value
}
warnings()
wordp <- data.frame(wwords, stringsAsFactors=FALSE)
wordp$p.val <- NA
y <- train$useful
y[y > 20] <- 20
for (iword in 1:length(wwords)){
tab <- table(train[, wwords[iword]], y)
wordp$p.val[iword] <- chisq.test(tab)$p.value
print(warnings())
print(iword)
}
tab
for (iword in 1:length(wwords)){
tab <- table(train[, wwords[iword]], y)
wordp$p.val[iword] <- chisq.test(tab)$p.value
print(tab)
print(iword)
}
wordp
wordp[order(wordp$p.val),]
wwords == "right"
which(wwords == "right")
iword <- 26
tab <- table(train[, wwords[iword]], y)
tab
prop.table(y, 2)
prop.table(tab, 2)
prop.table(tab, 1)
